package com.hospital.backend.config;

import io.swagger.v3.oas.models.OpenAPI;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.util.StringUtils;
import io.swagger.v3.oas.models.servers.Server;

import java.util.ArrayList;
import java.util.List;

@Configuration
public class SwaggerConfig {

    @Value("${server.servlet.context-path:/}")
    private String contextPath;
    
    // Este bean es fundamental para resolver el problema de "No API definition provided"
    @Bean
    @Primary
    public OpenAPI primaryOpenAPI(OpenAPI customOpenAPI) {
        // Crear una copia modificada del bean existente
        if (customOpenAPI != null) {
            // Ajustar servers para asegurarnos que usan el context-path correcto
            List<Server> servers = new ArrayList<>();
            
            // Asegurar que siempre tenemos al menos un servidor con el context-path correcto
            servers.add(new Server()
                    .url(normalizeContextPath(contextPath))
                    .description("Default Server"));
            
            // Usar los servidores adicionales configurados si existen
            if (customOpenAPI.getServers() != null && !customOpenAPI.getServers().isEmpty()) {
                for (Server server : customOpenAPI.getServers()) {
                    // Si ya tenemos un servidor con la misma URL, no a침adirlo nuevamente
                    if (servers.stream().noneMatch(s -> s.getUrl().equals(server.getUrl()))) {
                        servers.add(server);
                    }
                }
            }
            
            // Establecer los servidores en la configuraci칩n OpenAPI
            customOpenAPI.servers(servers);
            
            return customOpenAPI;
        }
        
        // Si no hay una definici칩n existente, crear una b치sica
        return new OpenAPI()
                .addServersItem(new Server()
                        .url(normalizeContextPath(contextPath))
                        .description("Default Server URL"));
    }
    
    private String normalizeContextPath(String contextPath) {
        if (!StringUtils.hasText(contextPath) || "/".equals(contextPath)) {
            return "/";
        }
        
        if (!contextPath.startsWith("/")) {
            contextPath = "/" + contextPath;
        }
        
        return contextPath;
    }
} 