package com.hospital.backend.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.view.RedirectView;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Controlador especial para resolver problemas espec칤ficos con Swagger UI
 * Proporciona endpoints para solucionar el error 404 en swagger-config
 */
@Controller
public class SwaggerController {

    @Value("${server.servlet.context-path:/}")
    private String contextPath;
    
    /**
     * Handler DIRECTO para solucionar el problema de swagger-config
     * Este es el endpoint exacto que est치 causando el error 404
     */
    @GetMapping(value = {
            "/v3/api-docs/swagger-config", 
            "/api/v3/api-docs/swagger-config",
            "/swagger-config", 
            "/api/swagger-config"
    }, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<Map<String, Object>> getSwaggerConfig() {
        Map<String, Object> config = new HashMap<>();
        
        // Crear la lista de URLs para los grupos de APIs
        List<Map<String, String>> urls = new ArrayList<>();
        
        // API principal - la documentaci칩n completa 
        Map<String, String> mainApi = new HashMap<>();
        String docsUrl = normalizeUrl("/v3/api-docs");
        mainApi.put("url", docsUrl);
        mainApi.put("name", "API Principal (Todas)");
        urls.add(mainApi);
        
        // Grupo de autenticaci칩n
        Map<String, String> authApi = new HashMap<>();
        authApi.put("url", docsUrl + "/authentication");
        authApi.put("name", "游댏 Autenticaci칩n");
        urls.add(authApi);
        
        // Grupo de citas
        Map<String, String> appointmentsApi = new HashMap<>();
        appointmentsApi.put("url", docsUrl + "/appointments");
        appointmentsApi.put("name", "游늰 Citas");
        urls.add(appointmentsApi);
        
        // Configuraci칩n completa
        config.put("urls", urls);
        config.put("validatorUrl", null);
        config.put("deepLinking", true);
        config.put("displayOperationId", false);
        config.put("defaultModelsExpandDepth", 1);
        config.put("defaultModelExpandDepth", 1);
        config.put("defaultModelRendering", "example");
        config.put("displayRequestDuration", true);
        config.put("docExpansion", "none");
        config.put("filter", true);
        config.put("showExtensions", true);
        config.put("showCommonExtensions", true);
        config.put("supportedSubmitMethods", new String[] { 
            "get", "put", "post", "delete", "options", "head", "patch", "trace" 
        });
        
        return new ResponseEntity<>(config, HttpStatus.OK);
    }
    
    /**
     * Redirecciona desde la ra칤z a Swagger UI
     */
    @GetMapping("/swagger")
    public RedirectView redirectToSwaggerUI() {
        return new RedirectView(contextPath + "/swagger-ui.html");
    }
    
    /**
     * Redirecciona desde la ruta /docs a Swagger UI
     */
    @GetMapping("/docs")
    public RedirectView redirectDocsToSwaggerUI() {
        return new RedirectView(contextPath + "/swagger-ui.html");
    }
    
    /**
     * Normaliza la URL considerando el context-path
     */
    private String normalizeUrl(String path) {
        // Si el context-path es ra칤z o est치 vac칤o, devolver la ruta directamente
        if (contextPath == null || contextPath.isEmpty() || "/".equals(contextPath)) {
            return path;
        }
        
        // Construir la URL correcta con el context-path
        String prefix = contextPath.startsWith("/") ? contextPath : "/" + contextPath;
        String cleanPath = path.startsWith("/") ? path.substring(1) : path;
        
        return prefix + "/" + cleanPath;
    }
} 